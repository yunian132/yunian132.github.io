{
    "version": "https://jsonfeed.org/version/1",
    "title": "余年的个人空间 • All posts by \"git\" category",
    "description": "学习笔记和随笔记录",
    "home_page_url": "https://yunian.site",
    "items": [
        {
            "id": "https://yunian.site/Note/Git/Git%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/",
            "url": "https://yunian.site/Note/Git/Git%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/",
            "title": "Git命令速查",
            "date_published": "2024-12-23T16:00:00.000Z",
            "content_html": "<h1 id=\"本地创建git仓库\"><a class=\"anchor\" href=\"#本地创建git仓库\">#</a> 本地创建 git 仓库</h1>\n<p>在本地创建初始仓库，可以在项目的根路径下使用以下 git 初始化命令，建议在空文件夹下使用。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>初始化后，项目根路径下生成了 <code>.git</code>  文件夹，其中保存着本地仓库的版本管理和配置信息，该文件夹在文件管理器中是默认隐藏的。此外，项目根路径下的所有目录及文件可以称之为工作区。</p>\n<h1 id=\"添加文件到暂存区\"><a class=\"anchor\" href=\"#添加文件到暂存区\">#</a> 添加文件到暂存区</h1>\n<p>git 系统提供了暂存区用于保存文件的变更操作，在某一阶段的开发工作完成后，即这个阶段的文件不再变更并且都添加进暂存区后，就可以提交到仓库中。</p>\n<p>将单个文件的新增或修改等变更添加到暂存区：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add main.py</span><br></pre></td></tr></table></figure></p>\n<p>将工作区中所有新增或修改的文件添加到暂存区：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p>只添加修改或者被删除的文件变更到暂存区，不包括新文件：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -u</span><br></pre></td></tr></table></figure></p>\n<p>可以多次向暂存区添加文件，提交到仓库的内容则是暂存区中所有变更合并后的文件内容。</p>\n<h1 id=\"提交文件到仓库当前分支\"><a class=\"anchor\" href=\"#提交文件到仓库当前分支\">#</a> 提交文件到仓库当前分支</h1>\n<p>在项目进行到某一开发节点，完成该阶段所有文件的变更并提交到暂存区后，就可以将此刻暂存区的内容提交到 git 仓库的当前使用分支，git 仓库会记录文件的改动情况，并与上一个节点的文件内容进行比较，检查文件中内容变更的位置。</p>\n<p>提交时可以附带说明，每次提交时添加说明可以在版本回退时快速找到对应的开发节点。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;第一次改动&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>添加参数 <code>-m</code>  表示添加改动说明，后面双引号中的内容即是此次改动的说明内容，双引号不可省略。</p>\n<h1 id=\"查看仓库当前状态\"><a class=\"anchor\" href=\"#查看仓库当前状态\">#</a> 查看仓库当前状态</h1>\n<p>仓库当前状态可以显示暂存区内容以及工作区的文件变更情况：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"版本回退\"><a class=\"anchor\" href=\"#版本回退\">#</a> 版本回退</h1>\n<p>如果需要放弃某次提交的内容变更，想要恢复到某一个历史版本时，就需要进行版本回退操作。</p>\n<p>在进行版本回退前可以先查看仓库的操作历史：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure></p>\n<p>在输出的 <code>log</code>  日志中，可以找到每次提交操作的 <code>commit id</code> 、说明和提交时间等信息，操作日志按照时间由近到远的顺序输出，最上方的日志显示的就是最近一次提交的信息。日志信息的行数太多时，可以在命令后面加上 <code>--pretty=oneline</code>  参数，每个操作的日志信息就会简化成一行显示。</p>\n<p>找到需要回退的版本后，使用版本回退命令恢复项目的文件内容：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 1094ab</span><br></pre></td></tr></table></figure></p>\n<p><code>1094ab</code>  就是日志显示中对应提交操作的 <code>commit id</code>  前几位的字符，git 会查找到 <code>commit id</code>  前几位字符与给出的字符匹配的操作进行回退。命令给出的字符不建议太短，否则容易匹配到多条操作，但是 git 也没有输入完整 <code>commit id</code>  的要求。</p>\n<p>命令中的 <code>--hard</code>  参数表示回退到对应版本已提交的状态，换成 <code>--soft</code>  参数则会回退到对应版本的未提交状态， <code>--mixed</code>  参数则回退到对应版本已添加但未提交的状态。</p>\n<p>如果是回退到最近几次的提交版本，还可以使用版本指针的形式代替提交操作的 <code>commit id</code>  来进行回退。因为 git 使用 <code>HEAD</code>  指针指向了当前版本，如果回退到上一个版本，将版本指针指向上个版本即可，可以使用下面的命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p>\n<p>而上上个版本可以将 <code>HEAD^</code>  参数换成 <code>HEAD^^</code> ，即往上回退多少个版本，在 <code>HEAD</code>  指针后添加多少个 <code>^</code>  字符即可，回退的版本数较多时，建议使用操作的 <code>commit id</code> ，或者用 <code>HEAD~100</code> （表示往上回退 100 个版本）格式的参数。</p>\n<p>而如果回退后仍有问题，想回到未回退时的版本，这时因为版本指针不能指向回退后被丢弃的版本， <code>git log</code>  命令也不再显示回退后被丢弃版本的 <code>commit id</code> ，所以就需要 git 命令的使用日志来找到被丢弃版本的 <code>commit id</code>  进行恢复，使用以下命令可以查看 git 命令的操作日志：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure></p>\n<p>在输出中找到想要恢复的版本的 <code>commit id</code> ，再使用 <code>git reset</code>  版本回退命令即可恢复。</p>\n<h1 id=\"撤销修改\"><a class=\"anchor\" href=\"#撤销修改\">#</a> 撤销修改</h1>\n<p>提交到仓库以后的文件需要撤销修改时，可以进行版本回退来实现，而未提交但需要撤销工作区和暂存区的修改时，则分为以下几种情况操作：</p>\n<p>若工作区做了修改，但未将这次修改添加到暂存区时，撤销工作区的现有修改可以使用以下命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git restore test.txt</span><br></pre></td></tr></table></figure></p>\n<p>该命令会将该文件恢复到上一次提交后的内容，而工作区中在上次提交后的所有修改都会被丢弃。</p>\n<p>而修改已添加到暂存区并需要撤销不再提交时，则需要指定文件从暂存区恢复文件，再按照上一次工作区修改但暂存区未修改的状态恢复：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git restore --staged test.txt</span><br></pre></td></tr></table></figure></p>\n<p>命令加入 <code>--staged</code>  参数后表示将丢弃该文件提交到暂存区的修改，而工作区中在上次添加之后的修改仍会保留。如果还要回退，则可以使用上一条命令将文件内容继续回退到与仓库相同即可。</p>\n<p>而如果只想取消文件在工作区中的修改，但保留暂存区中的修改，可以将 <code>--staged</code>  参数换成 <code>--worktree</code> ，此参数表示只丢弃工作区中的修改，恢复文件内容到上一次提交的状态，而不影响暂存区中已经添加的修改。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git restore --worktree test.txt</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h1>\n<p>文件的删除操作在 git 系统中也视为文件的一种变更操作，因此也可以使用 git 命令管理。手动在操作系统的文件管理中将文件删除再添加和提交此次变更，或者使用以下命令来删除文件，均可以被仓库感知和记录。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> test.txt</span><br></pre></td></tr></table></figure></p>\n<p>使用上述命令删除文件的同时，也会将该次删除操作添加到暂存区记录。</p>\n<p>同理，需要恢复被删除的文件可以视为撤销该文件的修改，根据删除操作是否被添加或者提交使用对应命令进行撤销修改或者版本回退操作。需要注意的是，如果文件新增后从未添加到暂存区跟踪变更就被手动删除，这种情况下是无法恢复的。</p>\n<h1 id=\"绑定远程仓库\"><a class=\"anchor\" href=\"#绑定远程仓库\">#</a> 绑定远程仓库</h1>\n<p>本地仓库可以绑定到远程仓库，方便文件的备份和分发。</p>\n<p>将本地仓库关联到远程仓库可以使用以下命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>origin</code>  参数是本地仓库中使用这个远程仓库时的别名，可以自定义。而 <code>origin</code>  参数后面的则是远程仓库 <code>SSH</code>  格式的 <code>git</code>  地址，使用该命令关联远程仓库时需要将示例地址修改为对应的 <code>git</code>  地址。</p>\n<p>第一次绑定后，可以将本地仓库 master（或者 main）主分支的内容推送到远程仓库。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></p>\n<p>在第一次推送时加入 <code>-u</code>  参数可以将本地仓库与远程仓库的主分支关联起来，也能简化后续的推送命令。而命令中的 <code>master</code>  参数是主分支名称，推送时不仅要切换到对应分支，还要注意本地仓库的分支名称与远程仓库的分支名称最好保持一致。</p>\n<p>git 系统也可以解除本地仓库与远程仓库的绑定关系，解绑后可以重新关联其他远程仓库的地址。</p>\n<p>在本地先查看仓库已经绑定的远程仓库信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></p>\n<p>根据远程仓库的名称解除绑定关系：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">rm</span> origin</span><br></pre></td></tr></table></figure></p>\n<p>解除绑定关系后，之前的远程仓库并不会被物理删除，需要去远程仓库的托管平台（如 Github、Gitee 等）删除。</p>\n<h1 id=\"克隆远程仓库\"><a class=\"anchor\" href=\"#克隆远程仓库\">#</a> 克隆远程仓库</h1>\n<p>当项目需要其他人协作或者更换了设备进行开发时，就可以从远程仓库克隆项目，获取项目的开发记录。</p>\n<p><figure class=\"highlight plaintext\"><figcaption><span>clone</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure></p>\n<p>克隆时将 git 仓库地址替换为对应远程仓库的地址即可，克隆后本地仓库的仅有远程仓库 master 分支的内容。</p>\n<p>因为主分支通常是不在本地直接开发的，所以克隆后还需要 <code>dev</code>  等分支进行开发，此时应在本地创建对应分支并指定远程仓库的对应开发分支，使用以下命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git switch -c dev origin/dev</span><br></pre></td></tr></table></figure></p>\n<p>这样就在本地创建并切换到了开发分支，同时还关联了远程仓库对应的开发分支，推送和拉取命令也是修改和获取开发分支的内容。</p>\n<p>如果本地已有其他的开发分支并且未与远程仓库的开发分支对应关联，在拉取时会提示 <code>no tracking infomation</code> ，此时需要先建立关联：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to dev origin/dev</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分支管理\"><a class=\"anchor\" href=\"#分支管理\">#</a> 分支管理</h1>\n<p>项目开发时，主分支的代码通常需要稳定、安全，所以开发时需要在其他分支上修改、提交，功能完成后再合并到主分支，所以项目的开发进程往往还需要管理许多主分支外的功能分支。</p>\n<h2 id=\"分支查看\"><a class=\"anchor\" href=\"#分支查看\">#</a> 分支查看</h2>\n<p>git 系统中主要使用 <code>git branch</code>  命令管理所有的分支，查看项目中已有的分支可以使用以下命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>##　分支创建</p>\n<p>因为 git 新版本引入了新的命令，所有创建分支有几种方式，以创建新的开发分支 <code>dev</code>  为例：</p>\n<p>创建新分支：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br></pre></td></tr></table></figure></p>\n<p>切换到新分支</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></figure></p>\n<p>也可以一条命令完成创建并切换，在旧版 git 系统中，切换命令中加入 <code>-d</code>  参数：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev</span><br></pre></td></tr></table></figure></p>\n<p>新版 git 系统引入了新的分支切换命令，创建并切换到新分支在新的切换命令中加入 <code>-c</code>  参数：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git switch -c dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分支合并\"><a class=\"anchor\" href=\"#分支合并\">#</a> 分支合并</h2>\n<p>当开发分支的功能完成后，可以将开发分支的内容合并到主分支中。合并前，需要先切换到主分支：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git switch master  </span><br></pre></td></tr></table></figure></p>\n<p>上面命令是新版 git 系统的分支切换命令，也可以使用旧版命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></p>\n<p>切换到主分支后，再合并开发分支：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure></p>\n<p>在合并时，如果两个分支在上一次合并前对同一处文件进行了修改，合并时 git 提示冲突，需要决定当前分支的文件内容将采用当前分支或者合并分支的内容，解决冲突后才能进行合并。</p>\n<p>##　分支删除</p>\n<p>当某一分支的功能开发完成不再使用时，可以将该分支删除：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"推送远程仓库\"><a class=\"anchor\" href=\"#推送远程仓库\">#</a> 推送远程仓库</h1>\n<p>每次提交到本地仓库以后，决定是否推送到远程仓库，推送时必须指定分支，下面的命令表示将本地的 <code>master</code>  分支推送到远程仓库 <code>origin</code> 。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"拉取远程仓库\"><a class=\"anchor\" href=\"#拉取远程仓库\">#</a> 拉取远程仓库</h1>\n<p>推送到远程仓库前，如果有其他人对远程仓库进行了提交，此时需要先拉取远程仓库的更新内容，解决与本地的冲突后，再进行推送才能成功。</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"标签设置\"><a class=\"anchor\" href=\"#标签设置\">#</a> 标签设置</h1>\n<p>除了使用 <code>commit id</code>  找到对应的提交外，也可以在某个重要时间节点的提交上打上标签，之后用这个标签就可以找到指定的提交。</p>\n<p>标签默认与最新提交关联，每个重要节点及时打上标签可以便于日后调整项目内容，如果没有第一时间打上标签，也可以在命令中指定对应提交的 <code>commit id</code>  与标签进行绑定。</p>\n<h2 id=\"创建标签\"><a class=\"anchor\" href=\"#创建标签\">#</a> 创建标签</h2>\n<p>在当前最新的提交上打上版本号 <code>v1.0</code> ，或者指定某个提交创建标签：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.0 f5c6334</span><br></pre></td></tr></table></figure></p>\n<p>创建带有说明信息的标签：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m <span class=\"string\">&quot;版本1.0&quot;</span> f5c6334</span><br></pre></td></tr></table></figure></p>\n<p>参数 <code>-a</code>  后输入标签名称，参数 <code>-m</code>  后输入需要附带的标签说明，最后则是指定标签绑定的提交的 <code>commit id</code> 。</p>\n<p>因为标签与提交是绑定的，如果打上标签的提交所在的分支合并到了其他分支，那么其他分支也会出现这个标签。</p>\n<h2 id=\"查看标签信息\"><a class=\"anchor\" href=\"#查看标签信息\">#</a> 查看标签信息</h2>\n<p>查看所有标签使用以下命令：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure></p>\n<p>查看某个标签的详细信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;tagname&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"推送标签到远程仓库\"><a class=\"anchor\" href=\"#推送标签到远程仓库\">#</a> 推送标签到远程仓库</h2>\n<p>标签创建后只存储在本地，不会自动随着提交被推送到远程仓库，需要单独推送标签到远程仓库：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;tagname&gt;</span><br></pre></td></tr></table></figure></p>\n<p>可以将所有未推送过的标签一起推送到远程仓库：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除标签\"><a class=\"anchor\" href=\"#删除标签\">#</a> 删除标签</h2>\n<p>标签没有推送到远程仓库时，以下命令可在本地安全删除错误或者弃用的标签：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0</span><br></pre></td></tr></table></figure></p>\n<p>如果标签被推送到了远程仓库，则需要先在本地删除，再将空标签推送到远程仓库上：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure></p>\n<p>命令中冒号不可省略，冒号的左边为空表示本地标签为空，而冒号右边则指定远程仓库中要删除的标签，其中 <code>refs/tags/</code>  为 <code>git系统</code> 中存储标签的路径，使用命令时，将 <code>&lt;tagname&gt;</code>  替换为要删除的标签名称即可。</p>\n<h1 id=\"自定义git命令\"><a class=\"anchor\" href=\"#自定义git命令\">#</a> 自定义 git 命令</h1>\n<p>自定义 git 命令是指 git 系统允许为较长的命令设置别名，从而使用简单的命令完成一些常用、或者复杂连续的动作。</p>\n<p>注意下面自定义命令的格式：</p>\n<p>①需要简化的命令参数中没有空格，可以不用加引号</p>\n<p>②命令参数中有引号，必须加引号</p>\n<p>③命令参数中含有单引号，则两边加双引号</p>\n<p>④命令参数中含有双引号，两边加单引号</p>\n<p>当然，设置别名并不是长度越短越好，建议仍然保持简化命令的易读性，比如：</p>\n<p>将 <code>status</code>  简化为 <code>st</code> 、 <code>checkout</code>  简化为 <code>co</code> 、 <code>commit</code>  设为 <code>ci</code>  以及 <code>branch</code>  改为 <code>br</code>  等：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>git config</code>  命令就是 git 系统中调整用户或者仓库配置命令。还可以注意到以上命令中都有 <code>--global</code>  参数，表示修改的是全局设置，即配置后可以在当前 git 用户下的所有仓库中生效，如果不加此参数，则配置只对当前仓库生效。</p>\n<p>另外别名前面的 <code>alias</code>  指的就是 git 系统配置文件中的 <code>alias</code>  别名配置项，本地仓库的配置可以在 <code>.git</code>  目录下查看 <code>config</code>  文件，用户的全局配置在用户主目录下的 <code>.gitconfig</code>  文件中，该文件是默认隐藏的，查看或者修改时要获取相应的权限。</p>\n<p>此处再列举几个推荐设置的简化命令：</p>\n<ul>\n<li>\n<p>显示最近一次的提交信息，原命令为 <code>git log -1</code> ，简化为 <code>git last</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.last <span class=\"string\">&#x27;log -1&#x27;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>调整日志中各信息的格式和颜色，使信息更加突出，原命令非常长，可以用简化命令 <code>git lg</code>  代替，以下是别名设置：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.lg <span class=\"string\">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>还有一种日志信息格式和配色的调整命令，日志中将显示每个提交的 6 个信息： commit、parent commit、title、content、author、date，并且每个提交之间存在两行间隔，简化命令为 <code>git plog</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.plog <span class=\"string\">&quot;log --graph --date=format:&#x27;%Y-%m-%d %H:%M:%S %A&#x27; --pretty=format:&#x27;%C(bold blue)commit: %C(bold red)%h %C(#00A89A)%d %n%C(bold blue)parent commit: %C(bold red)%p %n%C(bold blue)title: %C(#A477DB)%s  %n%C(bold blue)content: %C(#A477DB)%b %n%C(bold blue)author: %C(#1B92D6)%an &lt;%ae&gt; %n%C(bold blue)date: %C(#1B92D6)%ad %C(#4EAB00)(%ar) %n%n&#x27;&quot;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n",
            "tags": [
                "git",
                "开发笔记"
            ]
        }
    ]
}